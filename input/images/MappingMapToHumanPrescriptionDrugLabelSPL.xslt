<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2022r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://hl7.org/fhir" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xml="http://www.w3.org/XML/1998/namespace" xmlns:ns1="urn:hl7-org:v3" exclude-result-prefixes="ns0 tbf user vmf xs fn ns1">
	<xsl:template name="tbf:tbf56_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf57_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf58_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf59_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf60_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf61_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf62_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf63_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf64_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:li)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf65_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:li)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf96_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf66_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:dt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf97_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf98_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf67_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:space">
			<xsl:attribute name="xml:space" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf68_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf69_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cite">
			<xsl:attribute name="cite" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf70_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf71_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@summary">
			<xsl:attribute name="summary" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@border">
			<xsl:attribute name="border" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@frame">
			<xsl:attribute name="frame" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rules">
			<xsl:attribute name="rules" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cellspacing">
			<xsl:attribute name="cellspacing" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cellpadding">
			<xsl:attribute name="cellpadding" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:caption)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf99_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:col)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:colgroup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf101_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:thead)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf102_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tfoot)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf103_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tbody)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf104_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf72_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charset">
			<xsl:attribute name="charset" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@type">
			<xsl:attribute name="type" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@href">
			<xsl:attribute name="href" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@hreflang">
			<xsl:attribute name="hreflang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rel">
			<xsl:attribute name="rel" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rev">
			<xsl:attribute name="rev" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@shape">
			<xsl:attribute name="shape" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@coords">
			<xsl:attribute name="coords" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf73_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf74_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf75_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf76_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@name">
			<xsl:attribute name="name" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:area)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf106_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf77_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@src">
			<xsl:attribute name="src" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@alt">
			<xsl:attribute name="alt" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@longdesc">
			<xsl:attribute name="longdesc" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@height">
			<xsl:attribute name="height" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@usemap">
			<xsl:attribute name="usemap" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@ismap">
			<xsl:attribute name="ismap" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf78_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf79_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf80_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf81_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf82_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf83_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf84_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf85_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf86_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf87_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@cite">
			<xsl:attribute name="cite" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf88_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf89_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf90_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf91_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf92_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf93_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf94_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf95_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf96_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf97_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf98_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf99_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf100_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@span">
			<xsl:attribute name="span" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf101_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@span">
			<xsl:attribute name="span" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@width">
			<xsl:attribute name="width" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:col)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf100_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf102_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf103_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf104_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:tr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf105_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf105_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:th)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf107_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:td)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf108_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf106_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@accesskey">
			<xsl:attribute name="accesskey" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@tabindex">
			<xsl:attribute name="tabindex" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@shape">
			<xsl:attribute name="shape" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@coords">
			<xsl:attribute name="coords" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@href">
			<xsl:attribute name="href" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@nohref">
			<xsl:attribute name="nohref" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@alt">
			<xsl:attribute name="alt" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf107_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@abbr">
			<xsl:attribute name="abbr" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@axis">
			<xsl:attribute name="axis" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@headers">
			<xsl:attribute name="headers" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@scope">
			<xsl:attribute name="scope" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rowspan">
			<xsl:attribute name="rowspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@colspan">
			<xsl:attribute name="colspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf108_">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@id">
			<xsl:attribute name="id" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@class">
			<xsl:attribute name="class" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@style">
			<xsl:attribute name="style" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@title">
			<xsl:attribute name="title" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@lang">
			<xsl:attribute name="lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@xml:lang">
			<xsl:attribute name="xml:lang" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@dir">
			<xsl:attribute name="dir" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@abbr">
			<xsl:attribute name="abbr" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@axis">
			<xsl:attribute name="axis" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@headers">
			<xsl:attribute name="headers" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@scope">
			<xsl:attribute name="scope" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@rowspan">
			<xsl:attribute name="rowspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@colspan">
			<xsl:attribute name="colspan" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@align">
			<xsl:attribute name="align" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@char">
			<xsl:attribute name="char" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@charoff">
			<xsl:attribute name="charoff" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@valign">
			<xsl:attribute name="valign" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::xhtml:p)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf57_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h1)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf58_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h2)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf59_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h3)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf60_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h4)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf61_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h5)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf62_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:h6)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf63_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:div)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf56_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ul)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf64_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:ol)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf65_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dl)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf66_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:pre)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf67_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:hr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf68_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:blockquote)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf69_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:address)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf70_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:table)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf71_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:a)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf72_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:br)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf73_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:span)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf74_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:bdo)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf75_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:map)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf76_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:img)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf77_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:tt)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf78_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:i)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf79_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:b)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf80_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:big)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf81_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:small)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf82_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:em)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf83_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:strong)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf84_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:dfn)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf85_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:code)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf86_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:q)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf87_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:samp)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf88_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:kbd)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf89_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:var)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf90_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:cite)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf91_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:abbr)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf92_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:acronym)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf93_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sub)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf94_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::xhtml:sup)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf95_">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="user:createProductContent">
		<xsl:param name="Package" select="()"/>
		<xsl:param name="ManufacturedItemDefinition" select="()"/>
		<xsl:variable name="var8_containedItem" as="node()*" select="$Package/ns0:containedItem"/>
		<DrugLabelSubmission.Content xmlns="urn:hl7-org:v3">
			<xsl:for-each select="$var8_containedItem/ns0:amount">
				<quantity>
					<numerator>
						<xsl:for-each select="ns0:value/@value">
							<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="ns0:code/@value">
							<xsl:attribute name="unit" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</numerator>
					<denominator>
						<xsl:attribute name="value" namespace="" select="'1'"/>
					</denominator>
				</quantity>
			</xsl:for-each>
			<xsl:for-each select="$Package/ns0:quantity">
				<quantity>
					<numerator>
						<xsl:for-each select="@value">
							<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:attribute name="unit" namespace="" select="'1'"/>
					</numerator>
					<denominator>
						<xsl:attribute name="value" namespace="" select="'1'"/>
					</denominator>
				</quantity>
			</xsl:for-each>
			<containerPackagedProduct>
				<code>
					<xsl:for-each select="$Package/ns0:identifier/ns0:value/@value">
						<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:attribute name="codeSystem" namespace="" select="'2.16.840.1.113883.6.69'"/>
				</code>
				<xsl:for-each select="$Package/ns0:type">
					<xsl:variable name="var2_coding" as="node()*" select="ns0:coding"/>
					<formCode>
						<xsl:for-each select="$var2_coding/ns0:code/@value">
							<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var2_coding/ns0:system/@value">
							<xsl:variable name="var1_resultof_vmf___inputtoresult" as="xs:string?">
								<xsl:call-template name="vmf:vmf10_inputtoresult">
									<xsl:with-param name="input" select="xs:string(xs:anyURI(fn:string(.)))" as="xs:string"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var1_resultof_vmf___inputtoresult">
								<xsl:attribute name="codeSystem" namespace="" select="."/>
							</xsl:for-each>
						</xsl:for-each>
						<xsl:for-each select="$var2_coding/ns0:display/@value">
							<xsl:attribute name="displayName" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</formCode>
				</xsl:for-each>
				<xsl:for-each select="$Package/ns0:package">
					<xsl:variable name="var6_resultof_filter" as="node()*">
						<xsl:for-each select="$ManufacturedItemDefinition">
							<xsl:variable name="var5_cur" as="node()" select="."/>
							<xsl:variable name="var4_map_of_containedItem" as="xs:boolean*">
								<xsl:for-each select="$var8_containedItem/ns0:item/ns0:reference/ns0:reference/@value">
									<xsl:variable name="var3_cur" as="node()" select="."/>
									<xsl:for-each select="$var5_cur/ns0:identifier/ns0:value/@value">
										<xsl:sequence select="(fn:string($var3_cur) = fn:concat('ManufacturedItemDefinition/', fn:string(.)))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists(($var4_map_of_containedItem)[.])">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="var7_resultof_createProductContent" as="node()?">
						<xsl:call-template name="user:createProductContent">
							<xsl:with-param name="Package" as="node()">
								<PackagedProductDefinition.Package xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</PackagedProductDefinition.Package>
							</xsl:with-param>
							<xsl:with-param name="ManufacturedItemDefinition" as="node()*">
								<xsl:for-each select="$var6_resultof_filter">
									<ManufacturedItemDefinition xmlns="http://hl7.org/fhir">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ManufacturedItemDefinition>
								</xsl:for-each>
							</xsl:with-param>
						</xsl:call-template>
					</xsl:variable>
					<xsl:for-each select="$var7_resultof_createProductContent">
						<asContent>
							<xsl:for-each select="@classCode">
								<xsl:attribute name="classCode" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="ns1:quantity">
								<quantity>
									<xsl:sequence select="(./@node(), ./node())"/>
								</quantity>
							</xsl:for-each>
							<xsl:for-each select="ns1:containerPackagedProduct">
								<containerPackagedProduct>
									<xsl:sequence select="(./@node(), ./node())"/>
								</containerPackagedProduct>
							</xsl:for-each>
						</asContent>
					</xsl:for-each>
				</xsl:for-each>
			</containerPackagedProduct>
		</DrugLabelSubmission.Content>
	</xsl:template>
	<xsl:template name="user:createMedicinalProduct">
		<xsl:param name="MedicinalProductDefinition" select="()"/>
		<xsl:param name="PackagedProductDefinition" select="()"/>
		<xsl:param name="ManufacturedItemDefinition" select="()"/>
		<xsl:variable name="var17_name" as="node()*" select="$MedicinalProductDefinition/ns0:name"/>
		<xsl:variable name="var18_identifier" as="node()*" select="$MedicinalProductDefinition/ns0:identifier"/>
		<DrugLabelSubmission.ManufacturedProduct xmlns="urn:hl7-org:v3">
			<manufacturedProduct>
				<code>
					<xsl:for-each select="$var18_identifier/ns0:value/@value">
						<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:attribute name="codeSystem" namespace="" select="'2.16.840.1.113883.6.69'"/>
				</code>
				<xsl:variable name="var2_resultof_filter" as="node()*">
					<xsl:for-each select="$var17_name">
						<xsl:variable name="var1_map_of_type" as="xs:boolean*">
							<xsl:for-each select="ns0:type/ns0:coding/ns0:code/@value">
								<xsl:sequence select="(fn:string(.) = 'PROPRIETARY')"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists(($var1_map_of_type)[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var2_resultof_filter">
					<name>
						<xsl:for-each select="ns0:productName/@value">
							<xsl:sequence select="fn:string(.)"/>
						</xsl:for-each>
					</name>
				</xsl:for-each>
				<xsl:variable name="var4_resultof_filter" as="node()*">
					<xsl:for-each select="$var17_name">
						<xsl:variable name="var3_map_of_type" as="xs:boolean*">
							<xsl:for-each select="ns0:type/ns0:coding/ns0:code/@value">
								<xsl:sequence select="(fn:string(.) = 'PROPRIETARY')"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:not(fn:exists(($var3_map_of_type)[.]))">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var4_resultof_filter">
					<asEntityWithGeneric>
						<genericMedicine>
							<name>
								<xsl:for-each select="ns0:productName/@value">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</name>
						</genericMedicine>
					</asEntityWithGeneric>
				</xsl:for-each>
				<xsl:for-each select="$PackagedProductDefinition">
					<xsl:variable name="var9_current" as="node()" select="."/>
					<xsl:variable name="var7_resultof_filter" as="node()*">
						<xsl:for-each select="ns0:package">
							<xsl:variable name="var6_map_of_packageFor" as="xs:boolean*">
								<xsl:for-each select="$var9_current/ns0:packageFor/ns0:reference/@value">
									<xsl:variable name="var5_cur" as="node()" select="."/>
									<xsl:for-each select="$var18_identifier/ns0:value/@value">
										<xsl:sequence select="(fn:string($var5_cur) = fn:concat('MedicinalProductDefinition/', fn:string(.)))"/>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:variable>
							<xsl:if test="fn:exists(($var6_map_of_packageFor)[.])">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:for-each select="$var7_resultof_filter">
						<xsl:variable name="var8_resultof_createProductContent" as="node()?">
							<xsl:call-template name="user:createProductContent">
								<xsl:with-param name="Package" as="node()">
									<PackagedProductDefinition.Package xmlns="http://hl7.org/fhir">
										<xsl:sequence select="(./@node(), ./node())"/>
									</PackagedProductDefinition.Package>
								</xsl:with-param>
								<xsl:with-param name="ManufacturedItemDefinition" as="node()+">
									<xsl:for-each select="$ManufacturedItemDefinition">
										<ManufacturedItemDefinition xmlns="http://hl7.org/fhir">
											<xsl:sequence select="(./@node(), ./node())"/>
										</ManufacturedItemDefinition>
									</xsl:for-each>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var8_resultof_createProductContent">
							<asContent>
								<xsl:sequence select="(./@node(), ./node())"/>
							</asContent>
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</manufacturedProduct>
			<xsl:for-each select="$MedicinalProductDefinition/ns0:marketingStatus">
				<xsl:variable name="var14_dateRange" as="node()*" select="ns0:dateRange"/>
				<subjectOf>
					<marketingAct>
						<code>
							<xsl:attribute name="code" namespace="" select="'C53292'"/>
							<xsl:attribute name="codeSystem" namespace="" select="'2.16.840.1.113883.3.26.1.1'"/>
						</code>
						<statusCode>
							<xsl:for-each select="ns0:status/ns0:coding/ns0:code/@value">
								<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
						</statusCode>
						<effectiveTime>
							<xsl:for-each select="$var14_dateRange/ns0:start">
								<low>
									<xsl:for-each select="@value">
										<xsl:variable name="var11___as_double" as="xs:double" select="xs:double(xs:decimal('2'))"/>
										<xsl:variable name="var10_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:substring($var10_cur_as_string, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), fn:substring($var10_cur_as_string, xs:double(xs:decimal('6')), $var11___as_double)), fn:substring($var10_cur_as_string, xs:double(xs:decimal('9')), $var11___as_double))"/>
									</xsl:for-each>
								</low>
							</xsl:for-each>
							<xsl:for-each select="$var14_dateRange/ns0:end">
								<high>
									<xsl:for-each select="@value">
										<xsl:variable name="var13___as_double" as="xs:double" select="xs:double(xs:decimal('2'))"/>
										<xsl:variable name="var12_cur_as_string" as="xs:string" select="fn:string(.)"/>
										<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:substring($var12_cur_as_string, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), fn:substring($var12_cur_as_string, xs:double(xs:decimal('6')), $var13___as_double)), fn:substring($var12_cur_as_string, xs:double(xs:decimal('9')), $var13___as_double))"/>
									</xsl:for-each>
								</high>
							</xsl:for-each>
						</effectiveTime>
					</marketingAct>
				</subjectOf>
			</xsl:for-each>
			<xsl:for-each select="$MedicinalProductDefinition/ns0:route">
				<xsl:variable name="var16_coding" as="node()*" select="ns0:coding"/>
				<consumedIn>
					<substanceAdministration>
						<routeCode>
							<xsl:for-each select="$var16_coding/ns0:code/@value">
								<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="$var16_coding/ns0:system/@value">
								<xsl:variable name="var15_resultof_vmf___inputtoresult" as="xs:string?">
									<xsl:call-template name="vmf:vmf10_inputtoresult">
										<xsl:with-param name="input" select="xs:string(xs:anyURI(fn:string(.)))" as="xs:string"/>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var15_resultof_vmf___inputtoresult">
									<xsl:attribute name="codeSystem" namespace="" select="."/>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="$var16_coding/ns0:display/@value">
								<xsl:attribute name="displayName" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
						</routeCode>
					</substanceAdministration>
				</consumedIn>
			</xsl:for-each>
		</DrugLabelSubmission.ManufacturedProduct>
	</xsl:template>
	<xsl:template name="user:createSection">
		<xsl:param name="Section" select="()"/>
		<xsl:param name="MedicinalProductDefinition" select="()"/>
		<xsl:param name="PackagedProductDefinition" select="()"/>
		<xsl:param name="ManufacturedItemDefinition" select="()"/>
		<xsl:variable name="var9_code" as="node()*" select="$Section/ns0:code"/>
		<DrugLabelSubmission.Section xmlns="urn:hl7-org:v3">
			<xsl:for-each select="$Section/@id">
				<id>
					<xsl:attribute name="root" namespace="" select="fn:string(.)"/>
				</id>
			</xsl:for-each>
			<xsl:for-each select="$var9_code">
				<xsl:variable name="var2_coding" as="node()*" select="ns0:coding"/>
				<code>
					<xsl:for-each select="$var2_coding/ns0:code/@value">
						<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$var2_coding/ns0:system/@value">
						<xsl:variable name="var1_resultof_vmf___inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf10_inputtoresult">
								<xsl:with-param name="input" select="xs:string(xs:anyURI(fn:string(.)))" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var1_resultof_vmf___inputtoresult">
							<xsl:attribute name="codeSystem" namespace="" select="."/>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="$var2_coding/ns0:display/@value">
						<xsl:attribute name="displayName" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</code>
			</xsl:for-each>
			<xsl:for-each select="$Section/ns0:title">
				<title>
					<xsl:for-each select="@value">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</title>
			</xsl:for-each>
			<xsl:for-each select="$Section/ns0:text/xhtml:div">
				<xhtml:div>
					<xsl:call-template name="tbf:tbf56_">
						<xsl:with-param name="input" select="." as="node()"/>
					</xsl:call-template>
				</xhtml:div>
			</xsl:for-each>
			<xsl:for-each select="($Section/ns0:extension)[fn:exists((./@url)[(xs:string(xs:anyURI(fn:string(.))) = 'http://hl7.org/fhir/us/spl/StructureDefinition/sectionEffectiveTime')])]">
				<effectiveTime>
					<xsl:for-each select="ns0:valueDateTime/@value">
						<xsl:variable name="var4___as_double" as="xs:double" select="xs:double(xs:decimal('2'))"/>
						<xsl:variable name="var3_cur_as_string" as="xs:string" select="fn:string(.)"/>
						<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:substring($var3_cur_as_string, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), fn:substring($var3_cur_as_string, xs:double(xs:decimal('6')), $var4___as_double)), fn:substring($var3_cur_as_string, xs:double(xs:decimal('9')), $var4___as_double))"/>
					</xsl:for-each>
				</effectiveTime>
			</xsl:for-each>
			<xsl:variable name="var6_resultof_filter" as="node()*">
				<xsl:for-each select="$MedicinalProductDefinition">
					<xsl:variable name="var5_map_of_code" as="xs:boolean*">
						<xsl:for-each select="$var9_code/ns0:coding/ns0:code/@value">
							<xsl:sequence select="(fn:string(.) = '48780-1')"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists(($var5_map_of_code)[.])">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var6_resultof_filter">
				<xsl:variable name="var7_resultof_createMedicinalProduct" as="node()?">
					<xsl:call-template name="user:createMedicinalProduct">
						<xsl:with-param name="MedicinalProductDefinition" as="node()">
							<MedicinalProductDefinition xmlns="http://hl7.org/fhir">
								<xsl:sequence select="(./@node(), ./node())"/>
							</MedicinalProductDefinition>
						</xsl:with-param>
						<xsl:with-param name="PackagedProductDefinition" as="node()+">
							<xsl:for-each select="$PackagedProductDefinition">
								<PackagedProductDefinition xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</PackagedProductDefinition>
							</xsl:for-each>
						</xsl:with-param>
						<xsl:with-param name="ManufacturedItemDefinition" as="node()+">
							<xsl:for-each select="$ManufacturedItemDefinition">
								<ManufacturedItemDefinition xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</ManufacturedItemDefinition>
							</xsl:for-each>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var7_resultof_createMedicinalProduct">
					<subject>
						<manufacturedProduct>
							<xsl:sequence select="(./@node(), ./node())"/>
						</manufacturedProduct>
					</subject>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$Section/ns0:section">
				<xsl:variable name="var8_resultof_createSection" as="node()?">
					<xsl:call-template name="user:createSection">
						<xsl:with-param name="Section" as="node()">
							<Composition.Section xmlns="http://hl7.org/fhir">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Composition.Section>
						</xsl:with-param>
						<xsl:with-param name="MedicinalProductDefinition" as="node()+">
							<xsl:for-each select="$MedicinalProductDefinition">
								<MedicinalProductDefinition xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</MedicinalProductDefinition>
							</xsl:for-each>
						</xsl:with-param>
						<xsl:with-param name="PackagedProductDefinition" as="node()+">
							<xsl:for-each select="$PackagedProductDefinition">
								<PackagedProductDefinition xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</PackagedProductDefinition>
							</xsl:for-each>
						</xsl:with-param>
						<xsl:with-param name="ManufacturedItemDefinition" as="node()+">
							<xsl:for-each select="$ManufacturedItemDefinition">
								<ManufacturedItemDefinition xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</ManufacturedItemDefinition>
							</xsl:for-each>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<component>
					<xsl:for-each select="$var8_resultof_createSection">
						<section>
							<xsl:sequence select="(./@node(), ./node())"/>
						</section>
					</xsl:for-each>
				</component>
			</xsl:for-each>
		</DrugLabelSubmission.Section>
	</xsl:template>
	<xsl:template name="user:convertOrganization">
		<xsl:param name="Labeler" select="()"/>
		<xsl:param name="Registrant" select="()"/>
		<xsl:param name="Establishment" select="()"/>
		<xsl:param name="MedicinalProductDefinition" select="()"/>
		<DrugLabelSubmission.Labeler xmlns="urn:hl7-org:v3">
			<assignedEntity>
				<representedOrganization>
					<xsl:for-each select="$Labeler/ns0:identifier">
						<id>
							<xsl:for-each select="ns0:system/@value">
								<xsl:attribute name="root" namespace="" select="fn:substring-after(xs:string(xs:anyURI(fn:string(.))), 'urn:oid:')"/>
							</xsl:for-each>
							<xsl:for-each select="ns0:value/@value">
								<xsl:attribute name="extension" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
						</id>
					</xsl:for-each>
					<xsl:for-each select="$Labeler/ns0:name">
						<name>
							<xsl:for-each select="@value">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</name>
					</xsl:for-each>
					<assignedEntity>
						<assignedOrganization>
							<xsl:for-each select="$Registrant/ns0:identifier">
								<id>
									<xsl:for-each select="ns0:system/@value">
										<xsl:attribute name="root" namespace="" select="fn:substring-after(xs:string(xs:anyURI(fn:string(.))), 'urn:oid:')"/>
									</xsl:for-each>
									<xsl:for-each select="ns0:value/@value">
										<xsl:attribute name="extension" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</id>
							</xsl:for-each>
							<xsl:for-each select="$Registrant/ns0:name">
								<name>
									<xsl:for-each select="@value">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</name>
							</xsl:for-each>
							<xsl:for-each select="$Establishment">
								<xsl:variable name="var7_identifier" as="node()*" select="ns0:identifier"/>
								<assignedEntity>
									<assignedOrganization>
										<xsl:for-each select="$var7_identifier">
											<id>
												<xsl:for-each select="ns0:system/@value">
													<xsl:attribute name="root" namespace="" select="fn:substring-after(xs:string(xs:anyURI(fn:string(.))), 'urn:oid:')"/>
												</xsl:for-each>
												<xsl:for-each select="ns0:value/@value">
													<xsl:attribute name="extension" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
											</id>
										</xsl:for-each>
										<xsl:for-each select="ns0:name">
											<name>
												<xsl:for-each select="@value">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</name>
										</xsl:for-each>
									</assignedOrganization>
									<xsl:for-each select="$MedicinalProductDefinition">
										<xsl:variable name="var6_current" as="node()" select="."/>
										<xsl:variable name="var3_resultof_filter" as="node()*">
											<xsl:for-each select="ns0:operation">
												<xsl:variable name="var2_map_of_organization" as="xs:boolean*">
													<xsl:for-each select="ns0:organization/ns0:reference/@value">
														<xsl:variable name="var1_cur" as="node()" select="."/>
														<xsl:for-each select="$var7_identifier/ns0:value/@value">
															<xsl:sequence select="(fn:string($var1_cur) = fn:concat('Organization/Establishment-', fn:string(.)))"/>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:if test="fn:exists(($var2_map_of_organization)[.])">
													<xsl:sequence select="."/>
												</xsl:if>
											</xsl:for-each>
										</xsl:variable>
										<xsl:for-each select="$var3_resultof_filter">
											<performance>
												<actDefinition>
													<xsl:for-each select="ns0:type/ns0:concept">
														<xsl:variable name="var5_coding" as="node()*" select="ns0:coding"/>
														<code>
															<xsl:for-each select="$var5_coding/ns0:code/@value">
																<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:for-each select="$var5_coding/ns0:system/@value">
																<xsl:variable name="var4_resultof_vmf___inputtoresult" as="xs:string?">
																	<xsl:call-template name="vmf:vmf10_inputtoresult">
																		<xsl:with-param name="input" select="xs:string(xs:anyURI(fn:string(.)))" as="xs:string"/>
																	</xsl:call-template>
																</xsl:variable>
																<xsl:for-each select="$var4_resultof_vmf___inputtoresult">
																	<xsl:attribute name="codeSystem" namespace="" select="."/>
																</xsl:for-each>
															</xsl:for-each>
															<xsl:for-each select="$var5_coding/ns0:display/@value">
																<xsl:attribute name="displayName" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
														</code>
													</xsl:for-each>
													<product>
														<manufacturedProduct>
															<manufacturedMaterialKind>
																<code>
																	<xsl:for-each select="$var6_current/ns0:identifier/ns0:value/@value">
																		<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:attribute name="codeSystem" namespace="" select="'2.16.840.1.113883.6.69'"/>
																</code>
															</manufacturedMaterialKind>
														</manufacturedProduct>
													</product>
												</actDefinition>
											</performance>
										</xsl:for-each>
									</xsl:for-each>
								</assignedEntity>
							</xsl:for-each>
						</assignedOrganization>
					</assignedEntity>
				</representedOrganization>
			</assignedEntity>
		</DrugLabelSubmission.Labeler>
	</xsl:template>
	<xsl:template name="user:createUIIDII">
		<xsl:param name="Identifier" select="()"/>
		<Identifier-II xmlns="urn:hl7-org:v3">
			<xsl:for-each select="$Identifier/ns0:value/@value">
				<xsl:attribute name="root" namespace="" select="fn:substring-after(fn:string(.), 'urn:uuid:')"/>
			</xsl:for-each>
		</Identifier-II>
	</xsl:template>
	<xsl:template name="vmf:vmf10_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='http://loinc.org'">
				<xsl:copy-of select="'2.16.840.1.113883.6.1'"/>
			</xsl:when>
			<xsl:when test="$input='http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl'">
				<xsl:copy-of select="'2.16.840.1.113883.3.26.1.1'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var18_Bundle" as="node()?" select="ns0:Bundle"/>
		<xsl:variable name="var17_map_of_Bundle" as="node()*" select="$var18_Bundle/ns0:entry/ns0:resource/ns0:Organization"/>
		<document xmlns="urn:hl7-org:v3" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:for-each select="$var18_Bundle/ns0:identifier">
				<xsl:variable name="var1_resultof_createUIIDII" as="node()?">
					<xsl:call-template name="user:createUIIDII">
						<xsl:with-param name="Identifier" as="node()">
							<Identifier xmlns="http://hl7.org/fhir">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Identifier>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var1_resultof_createUIIDII">
					<id>
						<xsl:for-each select="@root">
							<xsl:attribute name="root" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</id>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:Composition">
				<xsl:variable name="var4_type" as="node()" select="ns0:type"/>
				<xsl:variable name="var3_coding" as="node()*" select="$var4_type/ns0:coding"/>
				<code>
					<xsl:for-each select="$var3_coding/ns0:code/@value">
						<xsl:attribute name="code" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$var3_coding/ns0:system/@value">
						<xsl:variable name="var2_resultof_vmf___inputtoresult" as="xs:string?">
							<xsl:call-template name="vmf:vmf10_inputtoresult">
								<xsl:with-param name="input" select="xs:string(xs:anyURI(fn:string(.)))" as="xs:string"/>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var2_resultof_vmf___inputtoresult">
							<xsl:attribute name="codeSystem" namespace="" select="."/>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="$var3_coding/ns0:display/@value">
						<xsl:attribute name="displayName" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</code>
			</xsl:for-each>
			<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:Composition">
				<title>
					<xsl:for-each select="ns0:title/@value">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</title>
			</xsl:for-each>
			<effectiveTime>
				<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:Composition/ns0:date/@value">
					<xsl:variable name="var6___as_double" as="xs:double" select="xs:double(xs:decimal('2'))"/>
					<xsl:variable name="var5_cur_as_string" as="xs:string" select="fn:string(.)"/>
					<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:substring($var5_cur_as_string, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), fn:substring($var5_cur_as_string, xs:double(xs:decimal('6')), $var6___as_double)), fn:substring($var5_cur_as_string, xs:double(xs:decimal('9')), $var6___as_double))"/>
				</xsl:for-each>
			</effectiveTime>
			<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:Composition/ns0:identifier">
				<xsl:variable name="var7_resultof_createUIIDII" as="node()?">
					<xsl:call-template name="user:createUIIDII">
						<xsl:with-param name="Identifier" as="node()">
							<Identifier xmlns="http://hl7.org/fhir">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Identifier>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var7_resultof_createUIIDII">
					<setId>
						<xsl:for-each select="@root">
							<xsl:attribute name="root" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</setId>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="($var18_Bundle/ns0:entry/ns0:resource/ns0:Composition/ns0:extension)[(xs:string(xs:anyURI(fn:string(@url))) = 'http://hl7.org/fhir/us/spl/StructureDefinition/versionNumber')]">
				<versionNumber>
					<xsl:for-each select="ns0:valueString/@value">
						<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</versionNumber>
			</xsl:for-each>
			<xsl:variable name="var9_resultof_filter" as="node()*">
				<xsl:for-each select="$var17_map_of_Bundle">
					<xsl:variable name="var8_map_of_type" as="xs:boolean*">
						<xsl:for-each select="ns0:type/ns0:coding/ns0:code/@value">
							<xsl:sequence select="(fn:string(.) = 'Labeler')"/>
						</xsl:for-each>
					</xsl:variable>
					<xsl:if test="fn:exists(($var8_map_of_type)[.])">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:for-each select="$var9_resultof_filter">
				<xsl:variable name="var11_resultof_filter" as="node()*">
					<xsl:for-each select="$var17_map_of_Bundle">
						<xsl:variable name="var10_map_of_type" as="xs:boolean*">
							<xsl:for-each select="ns0:type/ns0:coding/ns0:code/@value">
								<xsl:sequence select="(fn:string(.) = 'Registrant')"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists(($var10_map_of_type)[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var12_create_Organization_of_filter" as="node()*">
					<xsl:for-each select="$var11_resultof_filter">
						<Organization xmlns="http://hl7.org/fhir">
							<xsl:sequence select="(./@node(), ./node())"/>
						</Organization>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var14_resultof_filter" as="node()*">
					<xsl:for-each select="$var17_map_of_Bundle">
						<xsl:variable name="var13_map_of_type" as="xs:boolean*">
							<xsl:for-each select="ns0:type/ns0:coding/ns0:code/@value">
								<xsl:sequence select="(fn:string(.) = 'Establishment')"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:if test="fn:exists(($var13_map_of_type)[.])">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:variable name="var15_resultof_convertOrganization" as="node()?">
					<xsl:call-template name="user:convertOrganization">
						<xsl:with-param name="Labeler" as="node()">
							<Organization xmlns="http://hl7.org/fhir">
								<xsl:sequence select="(./@node(), ./node())"/>
							</Organization>
						</xsl:with-param>
						<xsl:with-param name="Registrant" select="($var12_create_Organization_of_filter)[(fn:position() &lt;= xs:integer('1'))]" as="node()?"/>
						<xsl:with-param name="Establishment" as="node()*">
							<xsl:for-each select="$var14_resultof_filter">
								<Organization xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</Organization>
							</xsl:for-each>
						</xsl:with-param>
						<xsl:with-param name="MedicinalProductDefinition" as="node()*">
							<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:MedicinalProductDefinition">
								<MedicinalProductDefinition xmlns="http://hl7.org/fhir">
									<xsl:sequence select="(./@node(), ./node())"/>
								</MedicinalProductDefinition>
							</xsl:for-each>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:for-each select="$var15_resultof_convertOrganization">
					<author>
						<xsl:sequence select="(./@node(), ./node())"/>
					</author>
				</xsl:for-each>
			</xsl:for-each>
			<component>
				<structuredBody>
					<component>
						<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:Composition/ns0:section">
							<xsl:variable name="var16_resultof_createSection" as="node()?">
								<xsl:call-template name="user:createSection">
									<xsl:with-param name="Section" as="node()">
										<Composition.Section xmlns="http://hl7.org/fhir">
											<xsl:sequence select="(./@node(), ./node())"/>
										</Composition.Section>
									</xsl:with-param>
									<xsl:with-param name="MedicinalProductDefinition" as="node()*">
										<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:MedicinalProductDefinition">
											<MedicinalProductDefinition xmlns="http://hl7.org/fhir">
												<xsl:sequence select="(./@node(), ./node())"/>
											</MedicinalProductDefinition>
										</xsl:for-each>
									</xsl:with-param>
									<xsl:with-param name="PackagedProductDefinition" as="node()*">
										<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:PackagedProductDefinition">
											<PackagedProductDefinition xmlns="http://hl7.org/fhir">
												<xsl:sequence select="(./@node(), ./node())"/>
											</PackagedProductDefinition>
										</xsl:for-each>
									</xsl:with-param>
									<xsl:with-param name="ManufacturedItemDefinition" as="node()*">
										<xsl:for-each select="$var18_Bundle/ns0:entry/ns0:resource/ns0:ManufacturedItemDefinition">
											<ManufacturedItemDefinition xmlns="http://hl7.org/fhir">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ManufacturedItemDefinition>
										</xsl:for-each>
									</xsl:with-param>
								</xsl:call-template>
							</xsl:variable>
							<xsl:for-each select="$var16_resultof_createSection">
								<section>
									<xsl:sequence select="(./@node(), ./node())"/>
								</section>
							</xsl:for-each>
						</xsl:for-each>
					</component>
				</structuredBody>
			</component>
		</document>
	</xsl:template>
</xsl:stylesheet>
