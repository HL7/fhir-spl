<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2022r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ns0="urn:hl7-org:v3" exclude-result-prefixes="tbf user vmf xs fn ns0">
	<xsl:template name="tbf:tbf1_Simple-CD">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@code">
			<xsl:attribute name="code" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@codeSystem">
			<xsl:attribute name="codeSystem" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@displayName">
			<xsl:attribute name="displayName" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::ns0:originalText)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf2_ED">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf2_ED">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@collectionNullFlavor">
			<xsl:attribute name="collectionNullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@flavorId">
			<xsl:attribute name="flavorId" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@updateMode">
			<xsl:attribute name="updateMode" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@representation">
			<xsl:attribute name="representation" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@mediaType">
			<xsl:attribute name="mediaType" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@language">
			<xsl:attribute name="language" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@compression">
			<xsl:attribute name="compression" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@integrityCheck">
			<xsl:attribute name="integrityCheck" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@integrityCheckAlgorithm">
			<xsl:attribute name="integrityCheckAlgorithm" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@description">
			<xsl:attribute name="description" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::ns0:reference)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf3_TEL">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::ns0:thumbnail)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf4_thumbnail">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::ns0:translation)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf5_EDTranslation">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf3_TEL">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@collectionNullFlavor">
			<xsl:attribute name="collectionNullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@flavorId">
			<xsl:attribute name="flavorId" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@updateMode">
			<xsl:attribute name="updateMode" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@use">
			<xsl:attribute name="use" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@capabilities">
			<xsl:attribute name="capabilities" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::ns0:useablePeriod)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf6_SXCM_TS">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf4_thumbnail">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@collectionNullFlavor">
			<xsl:attribute name="collectionNullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@flavorId">
			<xsl:attribute name="flavorId" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@updateMode">
			<xsl:attribute name="updateMode" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@representation">
			<xsl:attribute name="representation" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@mediaType">
			<xsl:attribute name="mediaType" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@language">
			<xsl:attribute name="language" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@compression">
			<xsl:attribute name="compression" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@integrityCheck">
			<xsl:attribute name="integrityCheck" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@integrityCheckAlgorithm">
			<xsl:attribute name="integrityCheckAlgorithm" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@description">
			<xsl:attribute name="description" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::ns0:reference)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf3_TEL">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf5_EDTranslation">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@collectionNullFlavor">
			<xsl:attribute name="collectionNullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@flavorId">
			<xsl:attribute name="flavorId" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@updateMode">
			<xsl:attribute name="updateMode" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@representation">
			<xsl:attribute name="representation" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@mediaType">
			<xsl:attribute name="mediaType" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@language">
			<xsl:attribute name="language" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@compression">
			<xsl:attribute name="compression" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@integrityCheck">
			<xsl:attribute name="integrityCheck" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@integrityCheckAlgorithm">
			<xsl:attribute name="integrityCheckAlgorithm" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@description">
			<xsl:attribute name="description" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::ns0:reference)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf3_TEL">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
					<xsl:if test="fn:boolean(self::ns0:thumbnail)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf4_thumbnail">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:sequence select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf6_SXCM_TS">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@collectionNullFlavor">
			<xsl:attribute name="collectionNullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@flavorId">
			<xsl:attribute name="flavorId" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@updateMode">
			<xsl:attribute name="updateMode" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@operator">
			<xsl:attribute name="operator" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/node()">
			<xsl:choose>
				<xsl:when test="fn:boolean(self::*)">
					<xsl:if test="fn:boolean(self::ns0:originalText)">
						<xsl:element name="{fn:string(fn:node-name(.))}" namespace="{fn:namespace-uri-from-QName(fn:node-name(.))}">
							<xsl:call-template name="tbf:tbf2_ED">
								<xsl:with-param name="input" select="." as="node()"/>
							</xsl:call-template>
						</xsl:element>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="fn:not(fn:boolean(self::text()))">
						<xsl:sequence select="."/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="user:createOrganizationAffiliation">
		<xsl:param name="participatingId" select="()"/>
		<xsl:param name="orgType" select="()"/>
		<xsl:param name="SimpleCD" select="()"/>
		<OrganizationAffiliation xmlns="http://hl7.org/fhir">
			<id>
				<xsl:attribute name="value" namespace="" select="fn:concat('organizationaffiliation-', $participatingId)"/>
			</id>
			<xsl:variable name="var1_resultof_vmf__inputtoresult" as="xs:string?">
				<xsl:call-template name="vmf:vmf1_inputtoresult">
					<xsl:with-param name="input" select="$orgType" as="xs:string"/>
				</xsl:call-template>
			</xsl:variable>
			<meta>
				<profile>
					<xsl:for-each select="$var1_resultof_vmf__inputtoresult">
						<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(.))"/>
					</xsl:for-each>
				</profile>
			</meta>
			<organization>
				<reference>
					<xsl:attribute name="value" namespace="" select="'#'"/>
				</reference>
			</organization>
			<participatingOrganization>
				<reference>
					<xsl:attribute name="value" namespace="" select="fn:concat('#', $participatingId)"/>
				</reference>
			</participatingOrganization>
			<code>
				<coding>
					<system>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl'))"/>
					</system>
					<code>
						<xsl:for-each select="$SimpleCD/@code">
							<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</code>
					<display>
						<xsl:for-each select="$SimpleCD/@displayName">
							<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</display>
				</coding>
			</code>
		</OrganizationAffiliation>
	</xsl:template>
	<xsl:template name="user:createHealthcareService">
		<xsl:param name="OperationDefinition" select="()"/>
		<xsl:variable name="var1_code" as="node()*" select="$OperationDefinition/ns0:code"/>
		<HealthcareService xmlns="http://hl7.org/fhir">
			<id>
				<xsl:for-each select="$var1_code/@code">
					<xsl:attribute name="value" namespace="" select="fn:concat('healthcareservice-', fn:string(.))"/>
				</xsl:for-each>
			</id>
			<meta>
				<profile>
					<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://hl7.org/fhir/us/spl/StructureDefinition/EstablishmentBusinessOperation'))"/>
				</profile>
			</meta>
			<providedBy>
				<reference>
					<xsl:attribute name="value" namespace="" select="'#'"/>
				</reference>
			</providedBy>
			<xsl:for-each select="$var1_code">
				<type>
					<coding>
						<system>
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl'))"/>
						</system>
						<code>
							<xsl:for-each select="@code">
								<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
						</code>
						<display>
							<xsl:for-each select="@displayName">
								<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
							</xsl:for-each>
						</display>
					</coding>
				</type>
			</xsl:for-each>
			<xsl:for-each select="$OperationDefinition/ns0:subjectOf">
				<serviceProvisionCode>
					<xsl:for-each select="ns0:approval/ns0:code">
						<coding>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl'))"/>
							</system>
							<code>
								<xsl:for-each select="@code">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</code>
							<display>
								<xsl:for-each select="@displayName">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</display>
						</coding>
					</xsl:for-each>
				</serviceProvisionCode>
			</xsl:for-each>
		</HealthcareService>
	</xsl:template>
	<xsl:template name="user:createEstablishmentOrganization">
		<xsl:param name="EstablishmentOrganization" select="()"/>
		<xsl:variable name="var24_http___hl__org_fhir_us_spl_Cod_as_string" as="xs:string" select="xs:string(xs:anyURI('http://hl7.org/fhir/us/spl/CodeSystem/codesystem-organizationTypes'))"/>
		<xsl:variable name="var25_assignedOrganization" as="node()*" select="$EstablishmentOrganization/ns0:assignedOrganization"/>
		<Organization xmlns="http://hl7.org/fhir">
			<id>
				<xsl:for-each select="$var25_assignedOrganization/ns0:id/@extension">
					<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat('Establishment', '-'), fn:string(.))"/>
				</xsl:for-each>
			</id>
			<meta>
				<profile>
					<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://hl7.org/fhir/us/spl/StructureDefinition/EstablishmentOrganization'))"/>
				</profile>
			</meta>
			<xsl:for-each select="$EstablishmentOrganization/ns0:performance">
				<contained>
					<xsl:for-each select="ns0:actDefinition">
						<xsl:variable name="var1_resultof_createHealthcareService" as="node()?">
							<xsl:call-template name="user:createHealthcareService">
								<xsl:with-param name="OperationDefinition" as="node()">
									<Organization.OperationDefinition xmlns="urn:hl7-org:v3">
										<xsl:sequence select="(./@node(), ./node())"/>
									</Organization.OperationDefinition>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var1_resultof_createHealthcareService">
							<HealthcareService>
								<xsl:sequence select="(./@node(), ./node())"/>
							</HealthcareService>
						</xsl:for-each>
					</xsl:for-each>
				</contained>
			</xsl:for-each>
			<xsl:for-each select="$var25_assignedOrganization">
				<xsl:variable name="var9_cur" as="node()" select="."/>
				<xsl:for-each select="ns0:assignedEntity">
					<xsl:variable name="var7_cur" as="node()" select="."/>
					<xsl:variable name="var8_idx" as="xs:integer" select="position()"/>
					<xsl:for-each select="ns0:assignedOrganization">
						<contained>
							<xsl:for-each select="$var7_cur/ns0:performance/ns0:actDefinition/ns0:code">
								<xsl:variable name="var6_cur" as="node()" select="."/>
								<xsl:for-each select="@code">
									<xsl:variable name="var5_cur_as_string" as="xs:string" select="fn:string(.)"/>
									<xsl:variable name="var2_resultof_vmf__inputtoresult" as="xs:string?">
										<xsl:call-template name="vmf:vmf2_inputtoresult">
											<xsl:with-param name="input" select="$var5_cur_as_string" as="xs:string"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:for-each select="$var2_resultof_vmf__inputtoresult">
										<xsl:variable name="var4_cur" as="xs:string" select="."/>
										<xsl:for-each select="$var9_cur/ns0:id/@extension">
											<xsl:variable name="var3_resultof_createOrganizationAffiliation" as="node()?">
												<xsl:call-template name="user:createOrganizationAffiliation">
													<xsl:with-param name="participatingId" select="fn:concat(fn:concat(fn:concat(fn:concat($var4_cur, '-'), fn:string(.)), '-'), xs:string($var8_idx))" as="xs:string"/>
													<xsl:with-param name="orgType" select="$var5_cur_as_string" as="xs:string"/>
													<xsl:with-param name="SimpleCD" as="node()">
														<Simple-CD xmlns="urn:hl7-org:v3">
															<xsl:call-template name="tbf:tbf1_Simple-CD">
																<xsl:with-param name="input" select="$var6_cur" as="node()"/>
															</xsl:call-template>
														</Simple-CD>
													</xsl:with-param>
												</xsl:call-template>
											</xsl:variable>
											<xsl:for-each select="$var3_resultof_createOrganizationAffiliation">
												<OrganizationAffiliation>
													<xsl:sequence select="(./@node(), ./node())"/>
												</OrganizationAffiliation>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</contained>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var25_assignedOrganization">
				<xsl:variable name="var20_cur" as="node()" select="."/>
				<xsl:for-each select="ns0:assignedEntity">
					<xsl:variable name="var18_cur" as="node()" select="."/>
					<xsl:variable name="var19_idx" as="xs:integer" select="position()"/>
					<xsl:for-each select="ns0:assignedOrganization">
						<xsl:variable name="var17_performance" as="node()*" select="$var18_cur/ns0:performance"/>
						<contained>
							<Organization>
								<id>
									<xsl:for-each select="$var17_performance/ns0:actDefinition/ns0:code/@code">
										<xsl:variable name="var10_resultof_vmf__inputtoresult" as="xs:string?">
											<xsl:call-template name="vmf:vmf2_inputtoresult">
												<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
											</xsl:call-template>
										</xsl:variable>
										<xsl:for-each select="$var10_resultof_vmf__inputtoresult">
											<xsl:variable name="var11_cur" as="xs:string" select="."/>
											<xsl:for-each select="$var20_cur/ns0:id/@extension">
												<xsl:attribute name="value" namespace="" select="fn:concat(fn:concat(fn:concat(fn:concat($var11_cur, '-'), fn:string(.)), '-'), xs:string($var19_idx))"/>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</id>
								<meta>
									<profile>
										<xsl:for-each select="$var17_performance/ns0:actDefinition/ns0:code/@code">
											<xsl:variable name="var12_resultof_vmf__inputtoresult" as="xs:string?">
												<xsl:call-template name="vmf:vmf3_inputtoresult">
													<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
												</xsl:call-template>
											</xsl:variable>
											<xsl:for-each select="$var12_resultof_vmf__inputtoresult">
												<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(.))"/>
											</xsl:for-each>
										</xsl:for-each>
									</profile>
								</meta>
								<xsl:for-each select="ns0:id">
									<identifier>
										<system>
											<xsl:for-each select="@root">
												<xsl:variable name="var14_resultof_vmf__inputtoresult" as="xs:string">
													<xsl:call-template name="vmf:vmf4_inputtoresult">
														<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:variable name="var13_test_resultof_starts_with" as="xs:string">
													<xsl:choose>
														<xsl:when test="fn:starts-with($var14_resultof_vmf__inputtoresult, 'http')">
															<xsl:sequence select="$var14_resultof_vmf__inputtoresult"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:sequence select="fn:concat('urn:oid:', $var14_resultof_vmf__inputtoresult)"/>
														</xsl:otherwise>
													</xsl:choose>
												</xsl:variable>
												<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI($var13_test_resultof_starts_with))"/>
											</xsl:for-each>
										</system>
										<value>
											<xsl:for-each select="@extension">
												<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
											</xsl:for-each>
										</value>
									</identifier>
								</xsl:for-each>
								<type>
									<coding>
										<system>
											<xsl:attribute name="value" namespace="" select="$var24_http___hl__org_fhir_us_spl_Cod_as_string"/>
										</system>
										<code>
											<xsl:for-each select="$var17_performance/ns0:actDefinition/ns0:code/@code">
												<xsl:variable name="var15_resultof_vmf__inputtoresult" as="xs:string?">
													<xsl:call-template name="vmf:vmf5_inputtoresult">
														<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:for-each select="$var15_resultof_vmf__inputtoresult">
													<xsl:attribute name="value" namespace="" select="."/>
												</xsl:for-each>
											</xsl:for-each>
										</code>
									</coding>
								</type>
								<xsl:for-each select="ns0:name">
									<name>
										<xsl:for-each select="(./node())[fn:boolean(self::text())]">
											<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
									</name>
								</xsl:for-each>
								<contact>
									<xsl:for-each select="ns0:telecom">
										<xsl:variable name="var16_resultof_parseTelecom" as="node()?">
											<xsl:call-template name="user:parseTelecom">
												<xsl:with-param name="SimpleTEL" as="node()">
													<Simple-TEL xmlns="urn:hl7-org:v3">
														<xsl:sequence select="(./@node(), ./node())"/>
													</Simple-TEL>
												</xsl:with-param>
											</xsl:call-template>
										</xsl:variable>
										<xsl:for-each select="$var16_resultof_parseTelecom">
											<telecom>
												<xsl:sequence select="(./@node(), ./node())"/>
											</telecom>
										</xsl:for-each>
									</xsl:for-each>
								</contact>
							</Organization>
						</contained>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
			<xsl:for-each select="$var25_assignedOrganization/ns0:id">
				<identifier>
					<system>
						<xsl:for-each select="@root">
							<xsl:variable name="var22_resultof_vmf__inputtoresult" as="xs:string">
								<xsl:call-template name="vmf:vmf4_inputtoresult">
									<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="var21_test_resultof_starts_with" as="xs:string">
								<xsl:choose>
									<xsl:when test="fn:starts-with($var22_resultof_vmf__inputtoresult, 'http')">
										<xsl:sequence select="$var22_resultof_vmf__inputtoresult"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:concat('urn:oid:', $var22_resultof_vmf__inputtoresult)"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI($var21_test_resultof_starts_with))"/>
						</xsl:for-each>
					</system>
					<value>
						<xsl:for-each select="@extension">
							<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</value>
				</identifier>
			</xsl:for-each>
			<type>
				<coding>
					<system>
						<xsl:attribute name="value" namespace="" select="$var24_http___hl__org_fhir_us_spl_Cod_as_string"/>
					</system>
					<code>
						<xsl:attribute name="value" namespace="" select="'Establishment'"/>
					</code>
				</coding>
			</type>
			<xsl:for-each select="$var25_assignedOrganization/ns0:name">
				<name>
					<xsl:for-each select="(./node())[fn:boolean(self::text())]">
						<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</name>
			</xsl:for-each>
			<xsl:for-each select="$var25_assignedOrganization/ns0:contactParty">
				<contact>
					<purpose>
						<coding>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://terminology.hl7.org/CodeSystem/contactentity-type'))"/>
							</system>
							<code>
								<xsl:attribute name="value" namespace="" select="'ADMIN'"/>
							</code>
						</coding>
					</purpose>
					<xsl:for-each select="ns0:contactPerson/ns0:name">
						<name>
							<text>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</text>
						</name>
					</xsl:for-each>
					<xsl:for-each select="ns0:telecom">
						<xsl:variable name="var23_resultof_parseTelecom" as="node()?">
							<xsl:call-template name="user:parseTelecom">
								<xsl:with-param name="SimpleTEL" as="node()">
									<Simple-TEL xmlns="urn:hl7-org:v3">
										<xsl:sequence select="(./@node(), ./node())"/>
									</Simple-TEL>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var23_resultof_parseTelecom">
							<telecom>
								<xsl:sequence select="(./@node(), ./node())"/>
							</telecom>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="ns0:addr">
						<address>
							<xsl:for-each select="ns0:streetAddressLine">
								<line>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</line>
							</xsl:for-each>
							<xsl:for-each select="ns0:city">
								<city>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</city>
							</xsl:for-each>
							<xsl:for-each select="ns0:state">
								<state>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</state>
							</xsl:for-each>
							<xsl:for-each select="ns0:postalCode">
								<postalCode>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</postalCode>
							</xsl:for-each>
							<xsl:for-each select="ns0:country">
								<country>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</country>
							</xsl:for-each>
						</address>
					</xsl:for-each>
				</contact>
			</xsl:for-each>
			<xsl:for-each select="$var25_assignedOrganization/ns0:addr">
				<contact>
					<purpose>
						<coding>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://hl7.org/fhir/us/spl/CodeSystem/codesystem-organizationContactType'))"/>
							</system>
							<code>
								<xsl:attribute name="value" namespace="" select="'ADDRESS'"/>
							</code>
						</coding>
					</purpose>
					<address>
						<xsl:for-each select="ns0:streetAddressLine">
							<line>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</line>
						</xsl:for-each>
						<xsl:for-each select="ns0:city">
							<city>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</city>
						</xsl:for-each>
						<xsl:for-each select="ns0:state">
							<state>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</state>
						</xsl:for-each>
						<xsl:for-each select="ns0:postalCode">
							<postalCode>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</postalCode>
						</xsl:for-each>
						<xsl:for-each select="ns0:country">
							<country>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</country>
						</xsl:for-each>
					</address>
				</contact>
			</xsl:for-each>
		</Organization>
	</xsl:template>
	<xsl:template name="user:parseTelecom">
		<xsl:param name="SimpleTEL" select="()"/>
		<xsl:variable name="var3_value" as="node()?" select="$SimpleTEL/@value"/>
		<ContactPoint xmlns="http://hl7.org/fhir">
			<system>
				<xsl:for-each select="$var3_value">
					<xsl:attribute name="value" namespace="">
						<xsl:call-template name="vmf:vmf6_inputtoresult">
							<xsl:with-param name="input" select="fn:substring-before(xs:string(xs:anyURI(fn:string(.))), ':')" as="xs:string"/>
						</xsl:call-template>
					</xsl:attribute>
				</xsl:for-each>
			</system>
			<value>
				<xsl:for-each select="$var3_value">
					<xsl:variable name="var2_cur_as_string" as="xs:string" select="xs:string(xs:anyURI(fn:string(.)))"/>
					<xsl:variable name="var1_resultof_vmf__inputtoresult" as="xs:string">
						<xsl:call-template name="vmf:vmf6_inputtoresult">
							<xsl:with-param name="input" select="fn:substring-before($var2_cur_as_string, ':')" as="xs:string"/>
						</xsl:call-template>
					</xsl:variable>
					<xsl:attribute name="value" namespace="">
						<xsl:choose>
							<xsl:when test="($var1_resultof_vmf__inputtoresult = 'url')">
								<xsl:sequence select="$var2_cur_as_string"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:sequence select="fn:substring-after($var2_cur_as_string, ':')"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
				</xsl:for-each>
			</value>
		</ContactPoint>
	</xsl:template>
	<xsl:template name="user:createRegistrant">
		<xsl:param name="RegistrantOrganization" select="()"/>
		<Organization xmlns="http://hl7.org/fhir">
			<id>
				<xsl:attribute name="value" namespace="" select="'EstablishmentRegistrant'"/>
			</id>
			<meta>
				<profile>
					<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://hl7.org/fhir/us/spl/StructureDefinition/EstablishmentRegistrantOrganization'))"/>
				</profile>
			</meta>
			<xsl:for-each select="$RegistrantOrganization/ns0:id">
				<identifier>
					<system>
						<xsl:for-each select="@root">
							<xsl:variable name="var2_resultof_vmf__inputtoresult" as="xs:string">
								<xsl:call-template name="vmf:vmf4_inputtoresult">
									<xsl:with-param name="input" select="fn:string(.)" as="xs:string"/>
								</xsl:call-template>
							</xsl:variable>
							<xsl:variable name="var1_test_resultof_starts_with" as="xs:string">
								<xsl:choose>
									<xsl:when test="fn:starts-with($var2_resultof_vmf__inputtoresult, 'http')">
										<xsl:sequence select="$var2_resultof_vmf__inputtoresult"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:sequence select="fn:concat('urn:oid:', $var2_resultof_vmf__inputtoresult)"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:variable>
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI($var1_test_resultof_starts_with))"/>
						</xsl:for-each>
					</system>
					<value>
						<xsl:for-each select="@extension">
							<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</value>
				</identifier>
			</xsl:for-each>
			<type>
				<coding>
					<system>
						<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://hl7.org/fhir/us/spl/CodeSystem/codesystem-organizationTypes'))"/>
					</system>
					<code>
						<xsl:attribute name="value" namespace="" select="'EstablishmentRegistrant'"/>
					</code>
				</coding>
			</type>
			<name>
				<xsl:for-each select="($RegistrantOrganization/ns0:name/node())[fn:boolean(self::text())]">
					<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
			</name>
			<xsl:for-each select="$RegistrantOrganization/ns0:contactParty">
				<contact>
					<purpose>
						<coding>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://terminology.hl7.org/CodeSystem/contactentity-type'))"/>
							</system>
							<code>
								<xsl:attribute name="value" namespace="" select="'ADMIN'"/>
							</code>
						</coding>
					</purpose>
					<xsl:for-each select="ns0:contactPerson/ns0:name">
						<name>
							<text>
								<xsl:for-each select="(./node())[fn:boolean(self::text())]">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</text>
						</name>
					</xsl:for-each>
					<xsl:for-each select="ns0:telecom">
						<xsl:variable name="var3_resultof_parseTelecom" as="node()?">
							<xsl:call-template name="user:parseTelecom">
								<xsl:with-param name="SimpleTEL" as="node()">
									<Simple-TEL xmlns="urn:hl7-org:v3">
										<xsl:sequence select="(./@node(), ./node())"/>
									</Simple-TEL>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<xsl:for-each select="$var3_resultof_parseTelecom">
							<telecom>
								<xsl:sequence select="(./@node(), ./node())"/>
							</telecom>
						</xsl:for-each>
					</xsl:for-each>
					<xsl:for-each select="ns0:addr">
						<address>
							<xsl:for-each select="ns0:streetAddressLine">
								<line>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</line>
							</xsl:for-each>
							<xsl:for-each select="ns0:city">
								<city>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</city>
							</xsl:for-each>
							<xsl:for-each select="ns0:state">
								<state>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</state>
							</xsl:for-each>
							<xsl:for-each select="ns0:postalCode">
								<postalCode>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</postalCode>
							</xsl:for-each>
							<xsl:for-each select="ns0:country">
								<country>
									<xsl:for-each select="(./node())[fn:boolean(self::text())]">
										<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
									</xsl:for-each>
								</country>
							</xsl:for-each>
						</address>
					</xsl:for-each>
				</contact>
			</xsl:for-each>
		</Organization>
	</xsl:template>
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='C73330'">
				<xsl:copy-of select="'http://hl7.org/fhir/us/spl/StructureDefinition/EstablishmentUSAgentAffiliation'"/>
			</xsl:when>
			<xsl:when test="$input='C73599'">
				<xsl:copy-of select="'http://hl7.org/fhir/us/spl/StructureDefinition/ImporterAffiliation'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf2_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='C73330'">
				<xsl:copy-of select="'USAgent'"/>
			</xsl:when>
			<xsl:when test="$input='C73599'">
				<xsl:copy-of select="'Importer'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf3_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='C73330'">
				<xsl:copy-of select="'http://hl7.org/fhir/us/spl/StructureDefinition/USAgentOrganization'"/>
			</xsl:when>
			<xsl:when test="$input='C73599'">
				<xsl:copy-of select="'http://hl7.org/fhir/us/spl/StructureDefinition/ImporterOrganization'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf4_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='1.3.6.1.4.1.519.1'">
				<xsl:copy-of select="'http://terminology.hl7.org/NamingSystem/DUNSNumber'"/>
			</xsl:when>
			<xsl:when test="$input='2.16.840.1.113883.4.82'">
				<xsl:copy-of select="'http://terminology.hl7.org/NamingSystem/FEI'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="xs:string($input)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf5_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='C73330'">
				<xsl:copy-of select="'USAgent'"/>
			</xsl:when>
			<xsl:when test="$input='C73599'">
				<xsl:copy-of select="'Importer'"/>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="vmf:vmf6_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='tel'">
				<xsl:copy-of select="'phone'"/>
			</xsl:when>
			<xsl:when test="$input='mailto'">
				<xsl:copy-of select="'email'"/>
			</xsl:when>
			<xsl:when test="$input='fax'">
				<xsl:copy-of select="'fax'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy-of select="'url'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<Bundle xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:for-each select="ns0:document">
				<xsl:variable name="var3_author" as="node()*" select="ns0:author"/>
				<type>
					<xsl:attribute name="value" namespace="" select="'collection'"/>
				</type>
				<xsl:for-each select="$var3_author/ns0:assignedEntity/ns0:representedOrganization/ns0:assignedEntity/ns0:assignedOrganization">
					<entry>
						<fullUrl>
							<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('http://example.org/Organization/EstablishmentRegistrant'))"/>
						</fullUrl>
						<xsl:variable name="var1_resultof_createRegistrant" as="node()?">
							<xsl:call-template name="user:createRegistrant">
								<xsl:with-param name="RegistrantOrganization" as="node()">
									<EstablishmentRegistration.RegistrantOrganization xmlns="urn:hl7-org:v3">
										<xsl:sequence select="(./@node(), ./node())"/>
									</EstablishmentRegistration.RegistrantOrganization>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<resource>
							<xsl:for-each select="$var1_resultof_createRegistrant">
								<Organization>
									<xsl:sequence select="(./@node(), ./node())"/>
								</Organization>
							</xsl:for-each>
						</resource>
					</entry>
				</xsl:for-each>
				<xsl:for-each select="$var3_author/ns0:assignedEntity/ns0:representedOrganization/ns0:assignedEntity/ns0:assignedOrganization/ns0:assignedEntity">
					<entry>
						<fullUrl>
							<xsl:for-each select="ns0:assignedOrganization/ns0:id">
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:concat('http://example.org/Organization/Establishment-', fn:string(@extension))))"/>
							</xsl:for-each>
						</fullUrl>
						<xsl:variable name="var2_resultof_createEstablishmentOrganization" as="node()?">
							<xsl:call-template name="user:createEstablishmentOrganization">
								<xsl:with-param name="EstablishmentOrganization" as="node()">
									<EstablishmentRegistration.EstablishmentEntity xmlns="urn:hl7-org:v3">
										<xsl:sequence select="(./@node(), ./node())"/>
									</EstablishmentRegistration.EstablishmentEntity>
								</xsl:with-param>
							</xsl:call-template>
						</xsl:variable>
						<resource>
							<xsl:for-each select="$var2_resultof_createEstablishmentOrganization">
								<Organization>
									<xsl:sequence select="(./@node(), ./node())"/>
								</Organization>
							</xsl:for-each>
						</resource>
					</entry>
				</xsl:for-each>
			</xsl:for-each>
		</Bundle>
	</xsl:template>
</xsl:stylesheet>
